// DO NOT EDIT THIS FILE IT WAS AUTOMATICALLY GENERATED ON 2013/08/12
////////////////////////////////////////////////////////////////////////////// 
// Copyright© 2013 by Broadcom Corporation. All Rights reserved.
// Original Author : Tony Kirke, Broadcom Corporation.
// This software is available under both the SystemC Open Source License 
// Version 3.1 and the MIT License
//
// The contents of this file are subject to the restrictions and limitations
// set forth in the SystemC Open Source License Version 3.1 (the "License").
// You may not use this file except in compliance with such restrictions and
// limitations. You may obtain instructions on how to receive a copy of the
// License at http://www.accellera.org/. Software distributed by Contributors
// under the License is distributed exclusively on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied.
// See the License for the specific language governing rights and limitations
// under the License.
////////////////////////////////////////////////////////////////////////////// 
// MIT License info:
// Permission is hereby granted, free of charge, to any person obtaining a copy 
// of this software and associated documentation files (the "Software"), to deal 
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all 
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE 
// USE OR OTHER DEALINGS IN THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////// 

////////////////////////////////////////////////////////////////////////////// 
#ifndef SYSTEMC_SC_FT_SC_UFIXED_20130812_CLASS_FUNCTIONS_H_
#define SYSTEMC_SC_FT_SC_UFIXED_20130812_CLASS_FUNCTIONS_H_
////////////////////////////////////////////////////////////////////////////// 

#include <iostream>

namespace sc_ft {


// Put outside of namespace
// IO functions
template <int NINT, int NFRC, sc_q_mode SC_Q_MODE, sc_o_mode SC_O_MODE> std::ostream& operator <<(std::ostream& os, const sc_ufixed<NINT, NFRC, SC_Q_MODE, SC_O_MODE>& r)
{
  return os << r.to_double(); // << " ";
};
template <int NINT, int NFRC, sc_q_mode SC_Q_MODE, sc_o_mode SC_O_MODE> std::istream& operator >>(std::istream& os, const sc_ufixed<NINT, NFRC, SC_Q_MODE, SC_O_MODE>& r)
{
  return os >> r;
};


// TEMPLATE functions for +,-,*,/ (divide returns double)

// addition
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval+1,Template_Max<INT_BITS_,INT_BITS_1>::maxval+1,QMODE,OMODE>
	operator +(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval+1,Template_Max<INT_BITS_,INT_BITS_1>::maxval+1,QMODE,OMODE> tmp(a);
    	tmp += b;	// no saturation needed since enough head space !
	    return(tmp);
}

// subtraction
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval+1,Template_Max<INT_BITS_,INT_BITS_1>::maxval+1,QMODE,OMODE>
	operator -(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval+1,Template_Max<INT_BITS_,INT_BITS_1>::maxval+1,QMODE,OMODE> tmp(a);
    	tmp -= b;	// no saturation needed since enough head space !
	    return(tmp);
}


// multiplication
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<(TOTAL_BITS_+TOTAL_BITS_1),(INT_BITS_+INT_BITS_1),QMODE,OMODE> 
	operator *(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	
	sc_ufixed<(TOTAL_BITS_+TOTAL_BITS_1),(INT_BITS_+INT_BITS_1),QMODE,OMODE> tmp;
	typedef typename sc_ufixed<(TOTAL_BITS_+TOTAL_BITS_1),(INT_BITS_+INT_BITS_1),QMODE,OMODE>::val_type mult_val_type;
	// Dont need to saturate here!
	tmp.val = (mult_val_type)(a.getVal())*(mult_val_type)(b.getVal());
	return tmp;
}

// division
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<(TOTAL_BITS_+TOTAL_BITS_1),(INT_BITS_+INT_BITS_1),QMODE,OMODE> 
	operator /(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	
	return ((double)a/(double)b);
}


// or
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE>
	operator |(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
    	tmpa.val |= tmpb.val;
	    return(tmpa);
}
// &
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE>
	operator &(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
    	tmpa.val &= tmpb.val;
	    return(tmpa);
}
// ^
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
	sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE>
	operator ^(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
    	tmpa.val ^= tmpb.val;
	    return(tmpa);
}


// <<
template <int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> 
	sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE>
	operator <<(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_uint<W>& shift) {
		sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE> tmp(a);
    	tmp <<= shift;
	    return(tmp);
}
// <<
template <int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> 
	sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE>
	operator <<(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_int<W>& shift) {
		sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE> tmp(a);
    	tmp <<= shift;
	    return(tmp);
}


// >>
template <int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> 
	sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE>
	operator >>(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_uint<W>& shift) {
		sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE> tmp(a);
    	tmp >>= shift;
	    return(tmp);
}
// >>
template <int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> 
	sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE>
	operator >>(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_int<W>& shift) {
		sc_ufixed<TOTAL_BITS_+W,INT_BITS_+W,QMODE,OMODE> tmp(a);
    	tmp >>= shift;
	    return(tmp);
}
// >> with int
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> 
	sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>
	operator >>(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const int& shift) {
		sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE> tmp(a);
    	tmp >>= shift;
	    return(tmp);
}
// << with int
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> 
	sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>
	operator <<(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const int& shift) {
		sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE> tmp(a);
    	tmp <<= shift;
	    return(tmp);
}



// Operations to support mixing with ints & doubles, etc

// Comparison operators "==,!=,<,<=,>,>=" between this type and 'double'


// NEW
//template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
//	bool operator ==(const uint_type& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_int() == (int)a);	}

// ^
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
bool
	operator ==(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
		return (tmpa.val == tmpb.val);
}
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
bool
	operator <(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
		return (tmpa.val < tmpb.val);
}
// re-use previous operators
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
bool
	operator !=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
		return !(tmpa.val == tmpb.val);
}
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
bool
	operator >(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
		return (tmpb.val < tmpa.val);
}
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
bool
	operator <=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
		return !(tmpb.val < tmpa.val);
}
template <int TOTAL_BITS_, int INT_BITS_, int TOTAL_BITS_1, int INT_BITS_1, sc_q_mode QMODE, sc_q_mode QMODE1, sc_o_mode OMODE, sc_o_mode OMODE1> 
bool
	operator >=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const sc_ufixed<TOTAL_BITS_1,INT_BITS_1,QMODE1,OMODE1>& b) {
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpa(a);
	    sc_ufixed<Template_Max_Total_Bits<TOTAL_BITS_,INT_BITS_,TOTAL_BITS_1,INT_BITS_1>::maxval,Template_Max<INT_BITS_,INT_BITS_1>::maxval,QMODE,OMODE> tmpb(b);
		return !(tmpa.val < tmpb.val);
}




// --------------------- BOOLEAN Comparisions "==,<=, <. >=, > , !=" -------------------------------------------
#ifdef ALL
// Compare with doubles
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() == a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() != a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() > a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() >= a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() < a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() <= a);	}

template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const double& a)  {return (b.to_double() == a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const double& a)  {return (b.to_double() != a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const double& a)  {return (b.to_double() < a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const double& a)  {return (b.to_double() <= a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const double& a)  {return (b.to_double() > a);	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const double& a)  {return (b.to_double() >= a);	}

// Compare with ints
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const sc_uint<W>& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() == double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const sc_uint<W>& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() != double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const sc_uint<W>& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() > double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const sc_uint<W>& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() >= double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const sc_uint<W>& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() < double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const sc_uint<W>& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() <= double(a));	}

template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const sc_uint<W>& a)  {return (b.to_double() == double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const sc_uint<W>& a)  {return (b.to_double() != double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const sc_uint<W>& a)  {return (b.to_double() < double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const sc_uint<W>& a)  {return (b.to_double() <= double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const sc_uint<W>& a)  {return (b.to_double() > double(a));	}
template<int W, int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const sc_uint<W>& a)  {return (b.to_double() >= double(a));	}

// compare with uint64
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() == double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() != double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() > double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() >= double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() < double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() <= double(a));	}

template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const uint64_t& a)  {return (b.to_double() == double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const uint64_t& a)  {return (b.to_double() != double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const uint64_t& a)  {return (b.to_double() < double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const uint64_t& a)  {return (b.to_double() <= double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const uint64_t& a)  {return (b.to_double() > double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const uint64_t& a)  {return (b.to_double() >= double(a));	}

// compare with int64
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() == double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() != double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() > double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() >= double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() < double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b)  {return (b.to_double() <= double(a));	}

template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator ==(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const int& a)  {return (b.to_double() == double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator !=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const int& a)  {return (b.to_double() != double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  <(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const int& a)  {return (b.to_double() < double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator <=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const int& a)  {return (b.to_double() <= double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator  >(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const int& a)  {return (b.to_double() > double(a));	}
template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE_, sc_o_mode OMODE_>
	bool operator >=(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE_,OMODE_> &b, const int& a)  {return (b.to_double() >= double(a));	}

#endif

	// Gen Math Ops
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator +(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a+(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator +(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b, const double& a) {
		return(((double)a+(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator -(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a-(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator -(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const double& b) {
		return(((double)a-(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator *(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a*(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator *(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const double& b) {
		return(((double)a*(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator /(const double& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a/(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator /(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const double& b) {
		return(((double)a/(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator +(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a+(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator +(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b, const int& a) {
		return(((double)a+(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator -(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a-(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator -(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const int& b) {
		return(((double)a-(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator *(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a*(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator *(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const int& b) {
		return(((double)a*(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator /(const int& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a/(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator /(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const int& b) {
		return(((double)a/(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator +(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a+(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator +(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b, const uint64_t& a) {
		return(((double)a+(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator -(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a-(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator -(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const uint64_t& b) {
		return(((double)a-(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator *(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a*(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator *(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const uint64_t& b) {
		return(((double)a*(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator /(const uint64_t& a, const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& b) {
		return(((double)a/(double)b));}
	template <int TOTAL_BITS_, int INT_BITS_, sc_q_mode QMODE, sc_o_mode OMODE> double operator /(const sc_ufixed<TOTAL_BITS_,INT_BITS_,QMODE,OMODE>& a, const uint64_t& b) {
		return(((double)a/(double)b));}


} // end of namespace sc_ft

#endif
